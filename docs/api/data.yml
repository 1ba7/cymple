Data:
  type: class
  implements: [Visualisable]
  docs: |-
    This class essentially provides an interface to the cympledata.bin file
    while is generated by the generate program.
  attributes:
    private Map<Short, User> users: |-
      A LinkedHashMap containing User objects for all the users, indexed
      by their ids. LinkedHashMap is used instead of HashMap so that the
      users can be returned in order. We can assume that insertion order ==
      natural order because the format of cymple.bin guarantees it.
    private Map<Short, Artist> artists: |-
      A LinkedHashMap containing Artist objects for all the artists, indexed
      by their ids. LinkedHashMap is used instead of HashMap so that the
      artists can be returned in order. We can assume that insertion order ==
      natural order because the format of cymple.bin guarantees it.
    private Map<Short, Album> albums: |-
      A LinkedHashMap containing Album objects for all the albums, indexed
      by their ids. LinkedHashMap is used instead of HashMap so that the
      albums can be returned in order. We can assume that insertion order ==
      natural order because the format of cymple.bin guarantees it.
    private Map<Short, Track> tracks: |-
      A LinkedHashMap containing Track objects for all the tracks, indexed
      by their ids. LinkedHashMap is used instead of HashMap so that the
      tracks can be returned in order. We can assume that insertion order ==
      natural order because the format of cymple.bin guarantees it.
    private RandomAccessFile file: |-
      The open cympledata.bin from which data is read.
    private short[] users: |-
      The users to which the current query applies (represented as shorts,
      see User).
    private short[] albums: |-
      The albums to which the current query applies (represented as shorts,
      see Album).
    private short[] listens: |-
      An sorted array of shorts, each of which represent a time
      (see common/Time).
  methods:
    public Data(String filename): |-
      Constructor. Takes the path to "cymple.bin" as its argument and reads in
      the necessary data from those files.
    public int size(): Returns the length of listens.
    public int usersSize(): Returns the number of users.
    public int artistsSize(): Returns the number of artists.
    public int albumsSize(): Returns the number of albums.
    public int tracksSize(): Returns the number of tracks.
    public User[] getUsers(): Returns an array of all users.
    public Artist[] getArtists(): Returns an array of all artists.
    public Album[] getAlbumsByArtists(SelectItemData[] artists): |-
      Returns an array containing the albums by the given artists. This is
      likely going to be called with data from a SelectItem, so it takes
      an array of SelectItemData which is cast into an array of Artists.
    public Track[] getTracksFromAlbums(SelectItemData[] albums): |-
      Returns an array containing the tracks from the given albums. This is
      likely going to be called with data from a SelectItem, so it takes
      an array of SelectItemData which is cast into an array of Artists.
    public User getUser(short id): Returns the user with this id.
    public Artist getArtist(short id): Returns the artist with this id.
    public Album getAlbum(short id): Returns the album with this id.
    public Track getTrack(short id): Returns the track with this id.
    public void query(SelectItemData[] users, SelectItemData[] albums):
      Updates the values of users, albums and ultimately listens. This will
      change the behaviour of the Visualisable functions. This is likely
      going to be called with data from a SelectItem, so it takes arrays of
      SelectItemData which are cast into arrays of Users and Albums.
    public int between(Time start, Time finish): |-
      This returns the number of listens between the given Times. This can be
      implemented using a binary search.
    public Time minTime(): |-
      Returns the earliest Time in the data.
    public Time maxTime(): |-
      Returns the latest Time in the data.
    public TreeMap<String, Integer> chartData(Time start, Time finish,
      ChartKey key): |-
      This is the data that is used to draw the chart, sorted by value.
      See common/ChartKey.

User:
  type: class
  implements: [SelectMenuItem, Comparable<User>]
  docs: |-
    Represents a user. Like all ChartKey types, every user has a unique id
    which is a short value.
  attributes:
    private String name: The name of the user.
    private short id: The user's unique id.
  methods:
    protected short id(): Returns the user's unique id.
    public int compareTo(User other): Sorts alphabetically.
    public String toString(): Returns the name attribute.

Artist:
  type: class
  implements: [SelectItemData, Comparable<Artist>]
  docs: |-
    Represents an artist. Like all ChartKey types, every artist has a unique
    id which is a short value.
  attributes:
    private String name: The name of the artist.
    private short id: The artist's unique id.
    private Album[] albums: An array of albums by this artist.
  methods:
    public String getName(): Returns the name attribute.
    public short id(): Returns the artists's unique id.
    public int albumsSize(): Returns the number of albums by this artist.
    public Album[] getAlbums(): Returns an array of albums by this artist.
    public int compareTo(Artist other): Sorts alphabetically.
    public String toString(): Returns the name attribute.

Album:
  type: class
  implements: [SelectItemData, Comparable]
  docs: |-
    Represents an album. Like all ChartKey types, every album has a unique id
    which is a short value.
  attributes:
    private String title: The title of the album.
    private short id: The album's unique id.
    private Artist artist: The artist associated with this album.
    private Track[] tracks: An array of tracks from this album.
  methods:
    public String getTitle(): Returns the title attribute.
    public short id(): Returns the album's unique id.
    public Artist getArtist(): Returns the artist associated with this album.
    public int tracksSize(): Returns the number of tracks from this album.
    public Track[] getTracks(): Returns an array of albums by this artist.
    public int compareTo(Album other): Sorts alphabetically.
    public String toString(): Returns "#{artist} — #{album}".

Track:
  type: class
  implements: [SelectItemData, Comparable]
  docs: |-
    Represents an track. Like all ChartKey types, every track has a unique id
    which is a short value.
  attributes:
    private String title: The title of the track.
    private short id: The album's unique id.
    private Album album: The album that this track is from.
  methods:
    public String getTitle(): Returns the title attribute.
    public short id(): Returns the track's unique id.
    public Album getAlbum(): Returns the album that this track is from.
    public Artist getArtist(): Returns the artist associated with this track.
    public int compareTo(Track other): Sorts alphabetically.
    public String toString(): Returns "#{artist} — #{track}".
