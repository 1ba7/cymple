Seekable:
  type: interface
  docs: |-
    Seekables are coupled with a Seeker widget in the toolkit. They have two
    fundamental properties: resolution and positon, which are usually
    controlled by a Seeker in the GUI. Both a double values between 0.0 and
    1.0. Resolution is the fraction of the data that is displayable at any
    time, and position is the start of the displayable data.
  methods:
    public void setResolution(double resolution): |-
      This means that the graph will show a fraction of the total dataset.
    public void setPosition(double position): |-
      Sets the position at which the graph is drawn.
    public void update(): |-
      Updates any data structures that need updating as a result of a change
      in position or resolution.
    public String start(): |-
      Returns a String representation of the start of the specified range.
    public String finish(): |-
      Returns a String representation of the end of the specified range.

Graphable:
  type: interface
  extends: Seekable
  docs: |-
    This interface is to be implemented by data structures representing
    graphable data.
  methods:
    public void setSampleRate(int samples): |-
      Sets the number of samples taken to a GraphData.
    public GraphData getGraphData(): |-
      Returns a GraphData object for the current dataset.

Chartable:
  type: interface
  extends: Seekable
  docs: |-
    This interface is to be implemented by data structures representing
    chartable data.
  methods:
    public void setChartKey(CharyKey key): |-
      Sets the ChartKey for which the charts are calculated.
    public ChartData getChartData(): |-
      Returns a ChartData object for the current dataset.

SeekableData:
  type: class
  docs: |-
    This is a class inherited by GraphData and ChartData.
  attributes:
    private double position: The position at the time this data was created.
    private double resolution: The resolution at the time this data was created.
  methods:
    public SeekableData(double position, double resolution): |-
      Constructs a SeekalbeData with the given arguments.
    public double getResolution(): |-
      The resolution at the time this data was created.
    public double getPosition(): |-
      The position at the time this data was created.

GraphData:
  type: class
  extends: SeekableData
  docs: |-
    This is a data structure which can be used directly to draw a graph.
  attributes:
    private double[] samples: An array of points that describe the graph.
	private int maximum: The highest possible point in samples.
  methods:
    public GraphData(double position, double resolution, double[] samples, int maximum): |-
      Initiales a GraphData object.
    public int getSampleRate(): |-
      The sample rate at the time this was created.
    public double getSample(int n): |-
      Returns the (n - 1)th sample.
    public int getMaximum(): |-
      Returns the maximum possible point in the dataset. This should be
      displayed on the Y axis of the graph.

ChartData:
  type: class
  extends: SeekableData
  docs: |-
    This is a data structure which can be used directly to draw a chart.
  attributes:
    private ChartKey key: The chartKey for this chart.
    private String[] names: The names of the entries in the chart.
    private double[] relatives: |-
      The fractions of the total width of the chart that the entries will
      take up.
    private int[] absolutes: |-
      Absolutes, i.e., the absolute number of plays each entry as.
  methods:
    public ChartData(double position, double resolution, ChartKey key, String[] names, double[] relatives, int[] absolutes): |-
      Initiales a GraphData object.
    public ChartKey getChartKey(): |-
      The ChartKey for this chart.
    public String getName(int n): |-
      Returns the name of the (n - 1)th entry.
    public double getRelative(int n): |-
      Returns the relative magnitude of the (n - 1)th entry.
    public int getAbsolute(int n): |-
      Returns the absolute magnitude of the (n - 1)th entry.
    public int size(): |-
      Returns the number of entries in the chart.

ChartKey:
  type: enum
  docs: |-
    This enum conatins values for each "key" which can be used in the chart.
  values:
  - User
  - Artist
  - Album
  - Track

SelectItemData:
  type: interface
  docs: |-
    This interface is implemented by User, Artist, Album and Track, to be used
    in the select menu.
  methods:
    public int id(): Returns the id of this object.
    public String toString(): Returns the String representation of this object.
