Data:
  type: class
  implements: [Graphable, Chartable]
  docs: |-
    This class essentially provides an interface to the cympledata.bin file
    while is generated by the generate program.
  attributes:
    private RandomAccessFile file: |-
      The open cympledata.bin from which data is read.
    private int headerSize: The size of the header block of cymple.bin.
	private int userBlockSize: The size of the user block of cymple.bin.
	private int artistBlockSize: the size of the artist block of cymple.bin.
    private long minTime: |-
      The earliest time (i.e., the time represented by -32768).
    private long maxTime: |-
      The latest time (i.e., the time represented by 32767).
    private int userCount: The number of users in the dataset.
    private int artistCount: The number of artists in the dataset.
    private int albumCount: The number of albums in the dataset.
    private int trackCount: The number of tracks in the dataset.
    private int[] userIndex: |-
      The positions of the listens in cymple.bin for each user.
    private int[] artistIndex: |-
      The positions of the listens in cymple.bin for each user-artist tuple.
    private int[] albumIndex: |-
      The positions of the listens in cymple.bin for each user-album tuple.
    private int[] trackIndex: |-
      The positions of the listens in cymple.bin for each user-track tuple.
    private User[] users: |-
      An array of User objects for all the users, indexed by their ids. The
      format of cymple.bin guarantees that these are also in natural order.
    private Artist[] artists: |-
      An array of Artist objects for all the users, indexed by their ids. The
      format of cymple.bin guarantees that these are also in natural order.
    private Album[] albums: |-
      An array of Album objects for all the users, indexed by their ids. The
      format of cymple.bin guarantees that these are also in natural order.
    private Track[] tracks: |-
      An array of Track objects for all the users, indexed by their ids. The
      format of cymple.bin guarantees that these are also in natural order.
    private User[] queryUsers: |-
      The users to which the current query applies.
    private Album[] queryAlbums: |-
      The albums to which the current query applies.
    private short[] listens: |-
      An sorted array of shorts, each of which represent a time.
    private ChartData chartData: |-
      The ChartData object for this data. This is "cached", but is regenerated
      every time update() is called.
    private GraphData graphData: |-
      The GraphData object for this data. This is "cached", but is regenerated
      every time update() is called.
  methods:
    public Data(String filename): |-
      Constructor. Takes the path to "cymple.bin" as its argument and reads in
      the necessary data from those files.
    public int size(): Returns the length of listens.
    public int userCount(): Returns the number of users.
    public int artistCount(): Returns the number of artists.
    public int albumCount(): Returns the number of albums.
    public int trackCount(): Returns the number of tracks.
    public User[] getUsers(): Returns an array of all users.
    public Artist[] getArtists(): Returns an array of all artists.
    public Album[] getAlbumsByArtists(SelectItemData[] artists): |-
      Returns an array containing the albums by the given artists. This is
      likely going to be called with data from a SelectItem, so it takes
      an array of SelectItemData which is cast into an array of Artists.
    public Track[] getTracksFromAlbums(SelectItemData[] albums): |-
      Returns an array containing the tracks from the given albums. This is
      likely going to be called with data from a SelectItem, so it takes
      an array of SelectItemData which is cast into an array of Artists.
    public void query(SelectItemData[] users, SelectItemData[] albums): |-
      Updates the values of users, albums and ultimately listens. This will
      change the output of the Chartable, Graphable methods. This is likely
      going to be called with data from a SelectItem, so it takes arrays of
      SelectItemData which are cast into arrays of Users and Albums.
    public void setResolution(double resolution): |-
      This means that the graph will show a fraction of the total dataset.
    public void setPosition(double position): |-
      Sets the position at which the graph is drawn.
    public void update(): |-
      Updates the chartData and graphData attributes, if necessary.
    public String start(): |-
      Returns a String representation of the start time of the range, whose
      format depends on the resolution.
    public String finish(): |-
      Returns a String representation of the end time of the range, whose
      format depends on the resolution.
    public void setSampleRate(int samples): |-
      Sets the number of samples taken to a GraphData.
    public GraphData getGraphData(): |-
      Returns a GraphData object for the current dataset.
    public void setChartKey(CharyKey key): |-
      Sets the ChartKey for which the charts are calculated.
    public ChartData getChartData(): |-
      Returns a ChartData object for the current dataset.

User:
  type: class
  implements: [SelectItemData, Comparable<User>]
  docs: |-
    Represents a user. Like all SelectItemData types, every user has a unique
    id which is an int value.
  attributes:
    private String name: The name of the user.
    private int id: The user's unique id.
  methods:
    public int id(): Returns the user's unique id.
    public int compareTo(User other): Sorts alphabetically.
    public String toString(): Returns the name attribute.

Artist:
  type: class
  implements: [SelectItemData, Comparable<Artist>]
  docs: |-
    Represents an artist. Like all SelectItemData types, every artist has a
    unique id which is an int value.
  attributes:
    private String name: The name of the artist.
    private int id: The artist's unique id.
    private Album[] albums: An array of albums by this artist.
  methods:
    protected Artist(String name, int id, Album[] albums): Constructs an Artist.
    public String getName(): Returns the name attribute.
    public int id(): Returns the artists's unique id.
    public int albumCount(): Returns the number of albums by this artist.
    public Album[] getAlbums(): Returns an array of albums by this artist.
    public int compareTo(Artist other): Sorts alphabetically.
    public String toString(): Returns the name attribute.

Album:
  type: class
  implements: [SelectItemData, Comparable<Album>]
  docs: |-
    Represents an album. Like all SelectItemData types, every album has a
    unique id which is an int value.
  attributes:
    private String title: The title of the album.
    private int id: The album's unique id.
    private Artist artist: The artist associated with this album.
    private Track[] tracks: An array of tracks from this album.
  methods:
    protected Album(String title, int id, Track[] tracks): Constructs an Album.
    public String getTitle(): Returns the title attribute.
    public int id(): Returns the album's unique id.
    public Artist getArtist(): Returns the artist associated with this album.
    public int trackCount(): Returns the number of tracks from this album.
    public Track[] getTracks(): Returns an array of albums by this artist.
    public int compareTo(Album other): Sorts alphabetically.
    public String toString(): Returns "#{artist} - #{album}".

Track:
  type: class
  implements: [SelectItemData, Comparable<Track>]
  docs: |-
    Represents an track. Like all SelectItemData types, every track has a
    unique id which is an int value.
  attributes:
    private String title: The title of the track.
    private int id: The album's unique id.
    private Album album: The album that this track is from.
  methods:
    protected Track(String title, int id): Constructs a Track.
    public String getTitle(): Returns the title attribute.
    public int id(): Returns the track's unique id.
    public Album getAlbum(): Returns the album that this track is from.
    public Artist getArtist(): Returns the artist associated with this track.
    public int compareTo(Track other): Sorts alphabetically.
    public String toString(): Returns "#{artist} - #{track}".
